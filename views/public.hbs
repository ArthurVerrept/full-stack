<div class='public grid-container'>
    <div class="public grid-item left"></div>
    <div class="public grid-item grid-chosen-container left">
        <div class="public chosen-fit">
            <div class='public displayOutfit grid-item'></div>
            <div class='public displayOutfitItems grid-item'>
            </div>
        </div>
    </div>


    <div class='public grid-item right grid-profile-container'>
        <div class='public user'>
            <div class="profile-grid-item">
                <div class='public profilepic-div'>
                    <img class='public profile-image' src='' alt=''>
                </div>
                <p class='public username'>@{{user}}</p>
            </div>
            <div class='public post-amount'>
            </div> 
        </div>
        <div class="public profile-outfits-container">
                <div class="public profile-outfits">
                    
                </div>
        </div>
    </div>
    <div class="public grid-item right"></div>
</div>
<script src="/js/masonry.pkgd.min.js "></script>
<script src="https://unpkg.com/imagesloaded@4/imagesloaded.pkgd.min.js"></script>
<script>

String.prototype.splice = function(idx, rem, str) {
    return this.slice(0, idx) + str + this.slice(idx + Math.abs(rem));
};

// get username from page from handlebars
var x = document.querySelector('.username').innerText;

// remove @
var pos = x.indexOf('@');
var userName = x.splice(pos, 1, '');

// get url pathname and remove /p/username to be left with outfitID
var posName = window.location.pathname.indexOf(`/p/${userName}/`);
var fitID = window.location.pathname.splice(posName, 4 + userName.length, '');


const outfitPhoto = document.querySelector('.displayOutfit');
const outfitItems = document.querySelector('.displayOutfitItems');
const profilePic = document.querySelector('.profile-image');

 //create fetch req with username
fetch(`http://localhost:5000/p/${userName}/${fitID}/getUserInfo`)
.then(res => res.json())
.then((outfits) => {
    console.log(outfits)
    var keys = Object.keys(outfits)
    var vals = Object.values(outfits)
    let dataFeed = ``;

    for (let i = 0; i < keys.length; i++) {
        console.log(keys[i], vals[i])
        if(vals[i].brand == 'none' && keys[i] != 'ImageURL' && keys[i] != 'profileURL'){
        } else if(keys[i] == 'ImageURL') {
            dataFeedPhoto = `
                <img class="public chosen-photo" src='${vals[i]}' src='${vals[i]}'>
            `
        } else if (keys[i] != 'profileURL') {
            dataFeed += `
            <div class=public-item>
                <p class="public-itemS top type">${vals[i].type}: </p>
                <p class="public-itemS top">${vals[i].brand} </p>
                <p class="public-itemS bot">${vals[i].itemName} </p>
            </div>
            `
        }
    }
    profilePic.src = outfits.profileURL

    outfitPhoto.innerHTML = dataFeedPhoto;
    outfitItems.innerHTML = dataFeed;


});

var postAmount = document.querySelector('.post-amount')
var outfitDisplay = document.querySelector('.profile-outfits')
fetch(`http://localhost:5000/p/${userName}/${fitID}/getUserPics`)
.then(res => res.json())
.then((outfits) => {
    var posts = outfits.length;
    let dataFeed = outfits.map((outfits) => {
        // math to add q_60 into string
        String.prototype.splice = function(idx, rem, str) {
            return this.slice(0, idx) + str + this.slice(idx + Math.abs(rem));
        };

        // setting image quality to 60% for retriveal from cloudinary for faster page load times
        var str ='';
        str = outfits.ImageURL;
        var pos = str.indexOf('upload/')+6;
        var url = str.splice(pos, 0, '/q_60');

        return `
        <div class="profile-grid-item">
            <a href="/p/${outfits.userName}/${outfits._id}"><img class="publicOutfitImages" src="${url}"></a>
        </div>
    `
    }).join('');
    //console.log(dataFeed)
    outfitDisplay.innerHTML = dataFeed;

    postAmount.innerHTML = `
                            <p> ${posts}</p>
                            <p>Posts</p> 
                            `
}).then(()=>{
    var grid = document.querySelector('.profile-outfits-container');
    var msnry;
        imagesLoaded( grid, function() {
        // init Isotope after all images have loaded
        msnry = new Masonry( grid, {
            itemSelector: '.profile-grid-item',
            gutter:10
        });
    });
});


</script>
{{!-- {{else}} --}}
{{!-- <p>dont try that shit</p> --}}
{{!-- {{/if}} --}}

